name: Push to master

on:
  push:
    branches:
      - main

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    steps:

      - name: Get latest code
        uses: actions/checkout@v2

      
      # - name: Install openssl
      #   run: |
      #     sudo apt-get update
      #     sudo wget https://www.openssl.org/source/openssl-1.0.2s.tar.gz
      #     tar xvf openssl-1.0.2s.tar.gz
      #     cd openssl-1.0.2s
      #     ./config -Wl,--enable-new-dtags,-rpath,'$(LIBRPATH)'
      #     make
      #     sudo make install
      #     ln -s /usr/local/ssl/bin/openssl /usr/bin/openssl
      #     ln -s /usr/local/ssl/bin/openssl /usr/local/bin/openssl

      # - name: baixar OpenVPN
      #   run: |
      #     sudo apt-get install liblzo2-dev libssl-dev libpam0g-dev openssl
      #     sudo wget https://swupdate.openvpn.org/community/releases/openvpn-2.5.8.tar.gz
      #     tar xfz openvpn-2.5.8.tar.gz
      #     cd openvpn-2.5.8
      #     ./configure --disable-plugin-auth-pam
      #     make 
      #     sudo make install

      - name: Generate environment dev
        run: |
          cd src
          mkdir ../environments
          cd environments
          touch environment.development.ts
          echo 'Testesssssssssssssssss' >> environment.development.ts
          cat environment.development.ts
          ls

          
          
      
          

        # wget https://swupdate.openvpn.org/community/releases/openvpn-2.4.7.tar.gz
        # tar xfz openvpn-2.4.7.tar.gz 
        #cd openvpn-2.4.7 
        #./configure

      # - name: Install OpenVPN
      #   run: |
      #     sudo apt-get update
      #     sudo apt-get --assume-yes --no-install-recommends install openvpn

      # - name: Setup VPN config
      #   run: |
      #     echo "${{ secrets.SECRET_USERNAME_PASSWORD }}" > secret.txt
      # - name: Connect VPN
      #   run: |
      #     sudo openvpn --config ".github/vpn/safiragit__ssl_vpn_config.ovpn" --log "vpn.log" --daemon
      # - name: Wait for a VPN connection
      #   timeout-minutes: 1
      #   run: |
      #     until ping -c1 ${{ secrets.FTP_SERVER }}; do sleep 2; done

      - name: Build Project frontend
        run: |
          echo "Deploy frontend"
          sleep 10s 